# Enterprise HAProxy Configuration
global
    daemon
    maxconn 4096
    log stdout local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    tune.ssl.default-dh-param 2048

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor
    option httpchk GET /health
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Frontend - Main Entry Point
frontend web_frontend
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/enterprise.pem
    redirect scheme https if !{ ssl_fc }
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    http-response set-header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:;"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 100 }
    
    # Routing rules
    use_backend web_servers if { path_beg / }
    use_backend api_servers if { path_beg /api/ }
    use_backend admin_servers if { path_beg /admin/ }
    use_backend stats_backend if { path_beg /stats }

# Backend - Web Servers
backend web_servers
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server web1 enterprise-web1:80 check inter 2000ms rise 2 fall 3
    server web2 enterprise-web2:80 check inter 2000ms rise 2 fall 3
    server web3 enterprise-web3:80 check inter 2000ms rise 2 fall 3

# Backend - API Servers
backend api_servers
    balance roundrobin
    option httpchk GET /api/health
    http-check expect status 200
    
    server api1 enterprise-api1:3000 check inter 2000ms rise 2 fall 3
    server api2 enterprise-api2:3000 check inter 2000ms rise 2 fall 3
    server api3 enterprise-api3:3000 check inter 2000ms rise 2 fall 3

# Backend - Admin Servers
backend admin_servers
    balance roundrobin
    option httpchk GET /admin/health
    http-check expect status 200
    
    server admin1 enterprise-admin1:8080 check inter 2000ms rise 2 fall 3
    server admin2 enterprise-admin2:8080 check inter 2000ms rise 2 fall 3

# Backend - Statistics
backend stats_backend
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats show-legends
    stats show-desc "Enterprise Load Balancer Statistics"

# Listen - Statistics Interface
listen stats
    bind *:8404
    stats enable
    stats uri /
    stats refresh 30s
    stats admin if TRUE
    stats show-legends
    stats show-desc "Enterprise Load Balancer Statistics"
