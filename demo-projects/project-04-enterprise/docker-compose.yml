version: '3.8'

services:
  # Load Balancer - HAProxy
  haproxy:
    image: haproxy:2.8-alpine
    container_name: enterprise-haproxy
    ports:
      - "80:80"
      - "443:443"
      - "8404:8404"  # Stats
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./ssl:/etc/ssl/certs:ro
      - ./logs/haproxy:/var/log
    depends_on:
      - web1
      - web2
      - web3
      - api1
      - api2
      - api3
    networks:
      - enterprise-network
    restart: unless-stopped

  # Web Servers - Nginx
  web1:
    build:
      context: ./applications/web-frontend
      dockerfile: Dockerfile
    container_name: enterprise-web1
    ports:
      - "8081:80"
    environment:
      - NODE_ENV=production
      - API_URL=http://api1:3000
    depends_on:
      - api1
    networks:
      - enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  web2:
    build:
      context: ./applications/web-frontend
      dockerfile: Dockerfile
    container_name: enterprise-web2
    ports:
      - "8082:80"
    environment:
      - NODE_ENV=production
      - API_URL=http://api2:3000
    depends_on:
      - api2
    networks:
      - enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  web3:
    build:
      context: ./applications/web-frontend
      dockerfile: Dockerfile
    container_name: enterprise-web3
    ports:
      - "8083:80"
    environment:
      - NODE_ENV=production
      - API_URL=http://api3:3000
    depends_on:
      - api3
    networks:
      - enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Servers - Node.js
  api1:
    build:
      context: ./applications/api-backend
      dockerfile: Dockerfile
    container_name: enterprise-api1
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - POSTGRES_HOST=postgres-primary
      - POSTGRES_PORT=5432
      - POSTGRES_DB=enterprise
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - REDIS_PASSWORD=password
    depends_on:
      - postgres-primary
      - redis-master
    networks:
      - enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  api2:
    build:
      context: ./applications/api-backend
      dockerfile: Dockerfile
    container_name: enterprise-api2
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - POSTGRES_HOST=postgres-primary
      - POSTGRES_PORT=5432
      - POSTGRES_DB=enterprise
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - REDIS_PASSWORD=password
    depends_on:
      - postgres-primary
      - redis-master
    networks:
      - enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  api3:
    build:
      context: ./applications/api-backend
      dockerfile: Dockerfile
    container_name: enterprise-api3
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - POSTGRES_HOST=postgres-primary
      - POSTGRES_PORT=5432
      - POSTGRES_DB=enterprise
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - REDIS_PASSWORD=password
    depends_on:
      - postgres-primary
      - redis-master
    networks:
      - enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Servers - Python
  admin1:
    build:
      context: ./applications/admin-panel
      dockerfile: Dockerfile
    container_name: enterprise-admin1
    ports:
      - "8084:8080"
    environment:
      - FLASK_ENV=production
      - POSTGRES_HOST=postgres-primary
      - POSTGRES_PORT=5432
      - POSTGRES_DB=enterprise
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - REDIS_PASSWORD=password
    depends_on:
      - postgres-primary
      - redis-master
    networks:
      - enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  admin2:
    build:
      context: ./applications/admin-panel
      dockerfile: Dockerfile
    container_name: enterprise-admin2
    ports:
      - "8085:8080"
    environment:
      - FLASK_ENV=production
      - POSTGRES_HOST=postgres-primary
      - POSTGRES_PORT=5432
      - POSTGRES_DB=enterprise
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - REDIS_PASSWORD=password
    depends_on:
      - postgres-primary
      - redis-master
    networks:
      - enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Primary Database - PostgreSQL
  postgres-primary:
    image: postgres:15-alpine
    container_name: enterprise-postgres-primary
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=enterprise
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=replicator_password
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./databases/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./databases/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./logs/postgres:/var/log/postgresql
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Read Replica - PostgreSQL
  postgres-replica:
    image: postgres:15-alpine
    container_name: enterprise-postgres-replica
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=enterprise
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_MASTER_HOST=postgres-primary
      - POSTGRES_MASTER_PORT=5432
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=replicator_password
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./databases/postgres/postgresql-replica.conf:/etc/postgresql/postgresql.conf:ro
      - ./logs/postgres:/var/log/postgresql
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    depends_on:
      - postgres-primary
    networks:
      - enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Master
  redis-master:
    image: redis:7-alpine
    container_name: enterprise-redis-master
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=password
    volumes:
      - redis_master_data:/data
      - ./databases/redis/redis-master.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "password", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Slave
  redis-slave:
    image: redis:7-alpine
    container_name: enterprise-redis-slave
    ports:
      - "6380:6379"
    environment:
      - REDIS_PASSWORD=password
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PORT=6379
      - REDIS_MASTER_PASSWORD=password
    volumes:
      - redis_slave_data:/data
      - ./databases/redis/redis-slave.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    depends_on:
      - redis-master
    networks:
      - enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "password", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: enterprise-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./logs/elasticsearch:/usr/share/elasticsearch/logs
    networks:
      - enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: enterprise-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./logs/rabbitmq:/var/log/rabbitmq
    networks:
      - enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: enterprise-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - enterprise-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: enterprise-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    depends_on:
      - prometheus
    networks:
      - enterprise-network
    restart: unless-stopped

  # Monitoring - AlertManager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: enterprise-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - enterprise-network
    restart: unless-stopped

  # Logging - ELK Stack
  elasticsearch-logs:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: enterprise-elasticsearch-logs
    ports:
      - "9201:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_logs_data:/usr/share/elasticsearch/data
    networks:
      - enterprise-network
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: enterprise-logstash
    ports:
      - "5044:5044"
    volumes:
      - ./monitoring/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on:
      - elasticsearch-logs
    networks:
      - enterprise-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: enterprise-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-logs:9200
    depends_on:
      - elasticsearch-logs
    networks:
      - enterprise-network
    restart: unless-stopped

volumes:
  postgres_primary_data:
    driver: local
  postgres_replica_data:
    driver: local
  redis_master_data:
    driver: local
  redis_slave_data:
    driver: local
  elasticsearch_data:
    driver: local
  elasticsearch_logs_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local

networks:
  enterprise-network:
    driver: bridge
